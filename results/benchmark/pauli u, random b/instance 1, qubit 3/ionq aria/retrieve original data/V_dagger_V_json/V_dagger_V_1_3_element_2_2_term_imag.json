"GateModelQuantumTaskResult(task_metadata=TaskMetadata(braketSchemaHeader=BraketSchemaHeader(name='braket.task_result.task_metadata', version='1'), id='arn:aws:braket:us-east-1:225989338317:quantum-task/7b8de229-b052-4ba2-802c-a8f002e9bfc7', shots=512, deviceId='arn:aws:braket:us-east-1::device/qpu/ionq/Aria-1', deviceParameters=IonqDeviceParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.ionq.ionq_device_parameters', version='1'), paradigmParameters=GateModelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.gate_model_parameters', version='1'), qubitCount=4, disableQubitRewiring=True), errorMitigation=None), createdAt='2025-03-06T14:50:37.009Z', endedAt='2025-03-06T15:59:45.822Z', status='COMPLETED', failureReason=None), additional_metadata=AdditionalMetadata(action=Program(braketSchemaHeader=BraketSchemaHeader(name='braket.ir.openqasm.program', version='1'), source='OPENQASM 3.0;\\nbit[4] b;\\n#pragma braket verbatim\\nbox{\\ngpi2(0.4493037205436199) $0;\\ngpi(3.0694476269682434) $1;\\ngpi2(0.9479434621112166) $2;\\ngpi2(5.117249343057399) $3;\\ngpi2(0.44929596770021923) $0;\\ngpi2(5.192150787522695) $1;\\ngpi(1.8782626896242276) $2;\\ngpi2(4.5867255873950805) $3;\\nms(0.47976180298773574, 1.2377855865643668, 0.6240518674437072) $1, $2;\\ngpi(3.2617862399558937) $3;\\ngpi2(1.7385966350065811) $1;\\ngpi(1.720577708206432) $2;\\nms(0.8985776345699592, 5.3449648809020065, 1.5707963267708513) $0, $2;\\ngpi2(1.7297227131361694) $0;\\ngpi(2.361001571503527) $2;\\ngpi2(4.0982250877373705) $0;\\ngpi2(4.08943946880105) $2;\\ngpi2(3.1059990840962266) $0;\\nms(5.757497541043906, 0.16780028026852797, 1.570796326794401) $0, $1;\\ngpi2(2.8476518397812547) $0;\\ngpi2(1.7385965253312305) $1;\\ngpi2(4.726944445730157) $0;\\ngpi2(2.9974313221648408) $1;\\ngpi2(4.066243894016911) $0;\\ngpi(2.284113800882765) $1;\\nms(2.879056675925139, 5.078439565236713, 1.5707963267430634) $0, $3;\\ngpi(1.4395283406703057) $0;\\ngpi(2.0285057867920386) $3;\\ngpi(1.8454804931954336) $3;\\n}\\nb[0] = measure $0;\\nb[1] = measure $1;\\nb[2] = measure $2;\\nb[3] = measure $3;', inputs={}), dwaveMetadata=None, ionqMetadata=None, rigettiMetadata=None, oqcMetadata=None, xanaduMetadata=None, queraMetadata=None, simulatorMetadata=None, iqmMetadata=None), result_types=[], values=[], measurements=array([[0, 0, 0, 0],\n       [0, 0, 0, 0],\n       [0, 0, 0, 0],\n       ...,\n       [1, 1, 0, 1],\n       [0, 0, 1, 1],\n       [1, 0, 1, 1]]), measured_qubits=[0, 1, 2, 3], measurement_counts=Counter({'0100': 85, '1000': 74, '1101': 69, '1100': 68, '0101': 65, '0001': 64, '1001': 44, '0000': 39, '0010': 1, '0110': 1, '0011': 1, '1011': 1}), measurement_probabilities={'0000': 0.076171875, '1000': 0.14453125, '0100': 0.166015625, '1100': 0.1328125, '0010': 0.001953125, '0110': 0.001953125, '0001': 0.125, '1001': 0.0859375, '0101': 0.126953125, '1101': 0.134765625, '0011': 0.001953125, '1011': 0.001953125}, measurements_copied_from_device=False, measurement_counts_copied_from_device=False, measurement_probabilities_copied_from_device=True, _result_types_indices={})"