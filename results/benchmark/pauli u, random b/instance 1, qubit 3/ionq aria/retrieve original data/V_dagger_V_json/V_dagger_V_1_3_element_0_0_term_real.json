"GateModelQuantumTaskResult(task_metadata=TaskMetadata(braketSchemaHeader=BraketSchemaHeader(name='braket.task_result.task_metadata', version='1'), id='arn:aws:braket:us-east-1:225989338317:quantum-task/bb422251-f697-4a2d-bdf4-21eced2c649b', shots=512, deviceId='arn:aws:braket:us-east-1::device/qpu/ionq/Aria-1', deviceParameters=IonqDeviceParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.ionq.ionq_device_parameters', version='1'), paradigmParameters=GateModelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.gate_model_parameters', version='1'), qubitCount=4, disableQubitRewiring=True), errorMitigation=None), createdAt='2025-03-06T14:47:28.985Z', endedAt='2025-03-06T15:56:13.484Z', status='COMPLETED', failureReason=None), additional_metadata=AdditionalMetadata(action=Program(braketSchemaHeader=BraketSchemaHeader(name='braket.ir.openqasm.program', version='1'), source='OPENQASM 3.0;\\nbit[4] b;\\n#pragma braket verbatim\\nbox{\\ngpi(2.206562040713374) $0;\\ngpi(0.32607341993803024) $1;\\ngpi2(4.318359055971801) $2;\\ngpi(1.9767373277635045) $3;\\ngpi(5.895841466979629) $1;\\ngpi(6.006155262404082) $2;\\ngpi2(5.119410641582991) $3;\\ngpi2(2.6615025831807397) $1;\\nms(4.2322989407255225, 2.981562496613921, 0.6240518671324446) $1, $2;\\ngpi(5.491611219833828) $1;\\ngpi(2.1563094155850577) $2;\\nms(1.27153144363783, 4.472648990739529, 1.570796326794854) $0, $2;\\ngpi2(2.992785097312642) $1;\\ngpi2(2.8423278232199776) $0;\\ngpi(3.6101058372328105) $2;\\ngpi2(2.6631863563168547) $0;\\ngpi2(4.318359042325327) $2;\\nms(4.2339827528306415, 1.421988743013485, 1.5707963267852518) $0, $1;\\ngpi2(0.6199696401852319) $0;\\ngpi2(5.582713921975071) $1;\\ngpi2(0.9987043993190777) $0;\\ngpi2(4.554960139406306) $1;\\ngpi2(0.4958682805033403) $0;\\ngpi2(2.676274196761352) $1;\\nms(3.972966718491023, 5.649934479174012, 1.5707963267931557) $0, $3;\\ngpi(3.5572796820203942) $0;\\ngpi(4.39576350003924) $3;\\ngpi2(1.570796304159075) $3;\\ngpi2(3.1415926120966455) $3;\\n}\\nb[0] = measure $0;\\nb[1] = measure $1;\\nb[2] = measure $2;\\nb[3] = measure $3;', inputs={}), dwaveMetadata=None, ionqMetadata=None, rigettiMetadata=None, oqcMetadata=None, xanaduMetadata=None, queraMetadata=None, simulatorMetadata=None, iqmMetadata=None), result_types=[], values=[], measurements=array([[0, 0, 0, 0],\n       [0, 0, 0, 0],\n       [0, 0, 0, 0],\n       ...,\n       [1, 0, 1, 1],\n       [1, 0, 1, 1],\n       [1, 1, 1, 1]]), measured_qubits=[0, 1, 2, 3], measurement_counts=Counter({'1001': 87, '0000': 70, '1000': 63, '1101': 63, '0100': 59, '0101': 59, '0001': 58, '1100': 45, '0010': 2, '1011': 2, '1010': 1, '1110': 1, '0011': 1, '1111': 1}), measurement_probabilities={'0000': 0.13671875, '1000': 0.123046875, '0100': 0.115234375, '1100': 0.087890625, '0010': 0.00390625, '1010': 0.001953125, '1110': 0.001953125, '0001': 0.11328125, '1001': 0.169921875, '0101': 0.115234375, '1101': 0.123046875, '0011': 0.001953125, '1011': 0.00390625, '1111': 0.001953125}, measurements_copied_from_device=False, measurement_counts_copied_from_device=False, measurement_probabilities_copied_from_device=True, _result_types_indices={})"